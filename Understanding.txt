This txt document will help explain what everything does and how they work

1) First step is to login into the database (username "postgres", password being your password)

2A)  Now that you are logged in you can either search for a room (still in progress)

2B) Or you can go to the "Employee section" this section can be used to search for the agreements
B2) After getting to the employee section, you need to login as a employee, currently this is done by having any username, 
    But having the password "admin"
B3) After having connected with the employee credentials, You can now search for a agreementID
B4) After having searched for a agreement ID, you can either deny or accept the agreement


How the servlet work:

AdminServlet: is used for logging in as the employee in section B
EmployeeServlet: is not currently being used
LoginServlet: is used to login as the database (username:postgres, password:UNIQUE)
LogoutServlet: is used to logout of the database (just resets the username and password)
ReservationServlet: Is used to search for the reservationID's, can then use the 3 buttons to deny, accept or view
SearchServlet: is used to search for a specific room (still in progress)

DenyReservationServlet      : Change a reservation from ___ to "free"
AcceptReservationServlet    : Change a reservation from ___ to "used" 
ViewReservationServlet      : --NOT IMPLEMENTED YET-- should allow you to view room and client

Application.java is used for connecting to the database 
	createTable: Used to create a table
		"name" will be the name of the table
     		"variables" variables will be a string array of the variables in the table in the format (NAME TYPE),(NAME TYPE), ETC... examples: (name VARCHAR(20)), (age INT)
     		"location" will be the location of the table (schema)
	
	insertIntoTable: Used to insert a row into a table
    		@param tableName: Name of the table
     		@param tableCollumn: A array with the name of the collumns
     		@param values: A array with the values to be inserted (make sure they have '' around them if they are strings, example: 'Bob')
          
    	createSchema: create a schema
	 	@param schemaName: Name of the Schema

	selectFromTable: Used to get information 
		@param tableName: Name of table
      	@param variable: The variables to be selected
      	@param schema: The location of the schema
		@param where: specifics of what your serching for (example: name = 'Bob', age = 20")

	updateRow: used to update a row
		@param tableName Name of the table
     		@param schema Name of the schema (Hotels)
     		@param values values to be changed (ex: room_status = 'free', room_annimities = 'test')
     		@param where specifics of what your serching for (example: agreement_num = '1')

	databaseRefresh: used to delete a database 

	deleteFromTable: --NOT IMPLEMENTED YET--

	foreignSelect: used when you want to connect a foreign key to a 2 tables (example in main)
	/**
     * 
     * @param tableName Table names
     * @param variable Name of column
     * @param schema Name of the schema 
     * @param where specifics of what your serching for (example: name = 'Bob', age = 20")
     */

	main: Used to create the database and test some stuff